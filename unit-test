#!/bin/bash

##################################################################################
# Copyright (c) 2017 Max Zhuravsky												 #
#                                                                                #
# Permission is hereby granted, free of charge, to any person obtaining a copy   #
# of this software and associated documentation files (the "Software"), to deal  #
# in the Software without restriction, including without limitation the rights   #
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      #
# copies of the Software, and to permit persons to whom the Software is          #
# furnished to do so, subject to the following conditions:                       #
#                                                                                #
# The above copyright notice and this permission notice shall be included in all #
# copies or substantial portions of the Software.                                #
#                                                                                #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  #
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  #
# SOFTWARE.                                                                      #
##################################################################################

##################################################################################
#                                   Unit Test                                    #
#                  Author:  Max Zhuravsky <paperlark@yandex.ru>                  #
##################################################################################

# Exit with integrity error
integrity_error() {
    echo '> error: test suit integrity error'
    exit 4
}

# Check whether the state of the parser is as expected
check_state() {
    if [ $# -eq 0 ]; then
        echo '> error: wrong number of arguments for checker'
        exit 5
    elif [ "$1" -ne $STATE ]; then
        integrity_error    
    fi
}

# Process tests from the file
process() {

    # Initialize variables and files
    LOG_FILE='log.test'
    echo -e 'Error Log:\n' > "${LOG_FILE}"
    TEST_ARGS=''
    TEST_NUM=0
    EXPECTED_RESULT=''
    RECEIVED_RESULT=''
    STATE=0 # 0 - initial state, 1 - inside suit, 2 - inside test, 3 - inside result 
    LEN=${#CONTENTS[@]}
    
    # Examine suit file line by line
    for (( i = 0; i < LEN; i++ )); do

        # Delete leading spaces and tabs
       CONTENTS[$i]=`echo "${CONTENTS[$i]}" | sed -e 's/^[ \t]*//'`

        # Process line
        if [ "${CONTENTS[$i]}" == '<Suit>' ]; then # Suit section found
            check_state 0
            STATE=1
        elif [ "${CONTENTS[$i]}" == '<Test>' ]; then # Test section found
            check_state 1
            STATE=2
            ARGS=""
            (( TEST_NUM++ ))        
        elif [ "${CONTENTS[$i]}" == '</Test>' ]; then # Test section ended
            check_state 2
            STATE=1
            echo -e "> test #${TEST_NUM} with arguments: \"`echo ${ARGS} | sed -e 's/[\t\n]*/ /' | sed -e 's/^ *//'`\" is running..."            
            RECEIVED_RESULT=`./"${BINARY}" <<< "${ARGS}"`
            EXIT_CODE="$?"

            if (( EXIT_CODE != 0 )); then # Error return code
                # Print log message to the file
                echo "> test #${TEST_NUM} failed with code $EXIT_CODE" >> "${LOG_FILE}"
                if [ "${FAILED}" != "" ]; then
                    FAILED="${FAILED}, "
                fi
                FAILED="${FAILED}#${TEST_NUM}"
            elif [ "${EXPECTED_RESULT}" != "${RECEIVED_RESULT}" ]; then # Wrong answer
                # Print log message to the log file
                echo "> test #${TEST_NUM} failed: result does not match the expected" >> "${LOG_FILE}"
                echo '> expected:' >> "${LOG_FILE}"
                echo "${EXPECTED_RESULT}" >> "${LOG_FILE}"
                echo '> result:' >> "${LOG_FILE}"
                echo "${RECEIVED_RESULT}" >> "${LOG_FILE}"
                echo >> "${LOG_FILE}"

                if [ "${FAILED}" != "" ]; then
                    FAILED="${FAILED}, "
                fi
                FAILED="${FAILED}#${TEST_NUM}"
            fi
        elif [ "${CONTENTS[$i]}" == '<Result>' ]; then # Result section found
            check_state 2
            STATE=3
            EXPECTED_RESULT=""
        elif [ "${CONTENTS[$i]}" == '</Result>' ]; then # Result section ended
            check_state 3
            STATE=2
        elif [ "${CONTENTS[$i]}" == '</Suit>' ]; then # Test suit section ended
            if [ "${STATE}" -ne 1 ]; then
                integrity_error
            fi
            STATE=0
        else # Argument or empty line found
            if [ "${STATE}" -eq 2 ]; then
                if [ "${ARGS}" != "" ]; then
                    ARGS=${ARGS}$'\n'
                fi
                ARGS=${ARGS}${CONTENTS[$i]}
            elif [ "${STATE}" -eq 3 ]; then
                if [ "${EXPECTED_RESULT}" != "" ]; then
                    EXPECTED_RESULT=${EXPECTED_RESULT}$'\n'
                fi
                EXPECTED_RESULT=${EXPECTED_RESULT}${CONTENTS[$i]}
            elif [ "${CONTENTS[$i]}" != "" ]; then
                integrity_error
            fi
        fi
    done

    if [ ${STATE} -ne 0 ]; then # Test suit end was not found
        integrity_error
    fi
}

# Check whether the file name was provided
if [ $# -ne 2 ]; then
    echo '> error: Wrong number of arguments. Usage: test [program] [test_suit].'
    exit 1
elif [ ! -x "$1" ]; then
    echo '> error: Program is not an exectutable file. Usage: test [program] [test_suit].'
    exit 2
elif [ ! -f "$2" ]; then
    echo '> error: Test suit not found. Usage: test [program] [test_suit].'
    exit 3
else
    echo '> unit testing is running...'
fi  

# Set variables
BINARY="$1"
TESTS="$2"
FAILED=""

# Read contents
CONTENTS=()
OIFS="${IFS}"
IFS=$'\n'
read -d '' -r -a CONTENTS < ${TESTS}
IFS="${OIFS}"
process
echo '> unit testing has finished!'
if [ FAILED == "" ]; then
    echo '> all tests are successfully passed'
else
    echo "> test(s) ${FAILED} were failed"
fi
